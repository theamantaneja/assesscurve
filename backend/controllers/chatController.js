const OpenAI = require('openai');
const Student = require('../models/Student');
const Teacher = require('../models/Teacher');
const config = require('../config/config');
const openai = new OpenAI({ apiKey: config.openAIAPIKey });

// Fetch syllabus for students based on class, board, and stream
const getSyllabusForStudent = async (classStandard, board, stream) => {
  try {
    const completion = await openai.chat.completions.create({
      model: 'gpt-4',
      messages: [
        { role: 'system', content: 'You are an educational assistant providing syllabus details for students based on the Indian education system.' },
        { role: 'user', content: `Provide the syllabus for Class ${classStandard} under the ${board} board, stream ${stream}.` }
      ]
    });

    return completion.choices[0]?.message?.content.trim() || 'No specific syllabus information found for the provided details.';
  } catch (error) {
    console.error('Error fetching student syllabus from OpenAI:', error);
    throw new Error('Failed to retrieve syllabus from OpenAI.');
  }
};

// Fetch lesson planning details for teachers using OpenAI
const getLessonPlanForTeacher = async (subject, grade_levels) => {
  try {
    const completion = await openai.chat.completions.create({
      model: 'gpt-4',
      messages: [
        { role: 'system', content: 'You are an educational assistant for teachers in India, helping create lesson plans.' },
        { role: 'user', content: `Provide lesson planning topics for the subject ${subject} for grades ${grade_levels}.` }
      ]
    });

    return completion.choices[0]?.message?.content.trim() || 'No lesson plan available at the moment for the provided details.';
  } catch (error) {
    console.error('Error fetching lesson plan from OpenAI:', error);
    throw new Error('Failed to retrieve lesson plan from OpenAI.');
  }
};

// Handle the chat request (unifies both initial and further requests)
const handleChatRequest = async (req, res) => {
  try {
    const { message, role, userId } = req.body;

    // Log the incoming request payload for debugging
    console.log('Received Request with Payload:', req.body);

    // Validate that role and userId are provided
    if (!role || !userId) {
      return res.status(400).json({ error: 'Missing required parameters: role or userId.' });
    }

    let userDetails;
    
    // If no message is sent, return the initial system message (syllabus/lesson plan)
    if (!message || message.trim() === '') {
      console.log(`Fetching initial message for ${role} with userId: ${userId}`);

      if (role === 'student') {
        userDetails = await Student.findById(userId);
        if (!userDetails) {
          return res.status(404).json({ error: 'Student details not found.' });
        }

        const syllabus = await getSyllabusForStudent(userDetails.classStandard, userDetails.board, userDetails.stream);
        return res.status(200).json({
          reply: `Here is the syllabus for Class ${userDetails.classStandard}, Stream: ${userDetails.stream}, (${userDetails.board} board):\n${syllabus}`
        });
      } else if (role === 'teacher') {
        userDetails = await Teacher.findById(userId);
        if (!userDetails) {
          return res.status(404).json({ error: 'Teacher details not found.' });
        }

        const lessonPlan = await getLessonPlanForTeacher(userDetails.subject, userDetails.grade_levels);
        return res.status(200).json({
          reply: `Here is the lesson plan for ${userDetails.subject} (Grades ${userDetails.grade_levels}): \n${lessonPlan}`
        });
      } else {
        return res.status(400).json({ error: 'Invalid role provided. Must be either "student" or "teacher".' });
      }
    }

    // **For further requests (user input messages)**
    console.log(`Processing further message: ${message}`);

    // Prompt OpenAI with the user's message to get a response
    const openaiResponse = await openai.chat.completions.create({
      model: 'gpt-4',
      messages: [
        { role: 'system', content: 'You are an educational assistant.' },
        { role: 'user', content: `${message}` }
      ]
    });

    // Extract and return the response generated by OpenAI
    const replyFromOpenAI = openaiResponse.choices[0]?.message?.content.trim() || 'Unable to generate a valid response. Please try again.';

    // Send the response back to the frontend
    return res.status(200).json({
      reply: replyFromOpenAI
    });

  } catch (error) {
    console.error('Error processing chat request:', error);
    return res.status(500).json({ error: 'Server encountered an error while processing your request.' });
  }
};

// Export the unified function for use in routes
module.exports = { handleChatRequest };